install.packages(c("aplpack", "caTools", "coin", "corrgram", "DBI", "devtools", "e1071", "flexmix", "forecast", "formatR", "fpc", "geosphere", "GGally", "gplots", "gsubfn", "HH", "Hmisc", "htmltools", "httr", "jsonlite", "labeling", "Lahman", "maps", "markdown", "MASS", "mclust", "mime", "NLP", "party", "pcaPP", "proxy", "rattle", "Rcmdr", "RcppArmadillo", "rgl", "rmarkdown", "sandwich", "swirl", "testthat", "UsingR", "xlsxjars", "xtable"))
setwd("C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Afr-Soil-Prediction")
library(e1071)
train <- read.csv("Data/training.csv",header=TRUE,stringsAsFactors=FALSE)
test <- read.csv("Data/sorted_test.csv",header=TRUE,stringsAsFactors=FALSE)
submission <- test[,1]
submission
labels <- train[,c("Ca","P","pH","SOC","Sand")]
labels
train <- train[,c(2:2655,2671:3579)]
test <- test[,c(2:2655,2671:3579)]
ncol(labels)
svms <- lapply(1:ncol(labels),
function(i)
{
svm(train,labels[,i],cost=10000,scale=FALSE)
})
svms
predictions <- sapply(svms,predict,newdata=test)
colnames(predictions) <- c("Ca","P","pH","SOC","Sand")
submission <- cbind(PIDN=submission,predictions)
write.csv(submission,"r_first_try.csv",row.names=FALSE,quote=FALSE)
library(e1071); library(caret)
index <- createDataPartition(y = train, p=0.8, list=F)
dim(train)
str(train)
index <- createDataPartition(y = train$Ca, p=0.8, list=F)
setwd("C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Afr-Soil-Prediction")
library(e1071); library(caret)
train <- read.csv("Data/training.csv",header=TRUE,stringsAsFactors=FALSE)
test <- read.csv("Data/sorted_test.csv",header=TRUE,stringsAsFactors=FALSE)
submission <- test[,1]
labels <- train[,c("Ca","P","pH","SOC","Sand")]
index <- createDataPartition(y = train$Ca, p=0.8, list=F)
table(index)
index
train_train <- train[index,]
train_test <- train[-index,]
train <- train[,c(2:2655,2671:3579)]
test <- test[,c(2:2655,2671:3579)]
train_train <- train[index,]
train_test <- train[-index,]
svms <- lapply(1:ncol(labels),
function(i)
{
svm(train_train,labels[,i],cost=10000,scale=FALSE)
})
labels_train <- labels[index,]
labels_test <- labels[-index,]
svms <- lapply(1:ncol(labels_train),
function(i)
{
svm(train_train,labels[,i],cost=10000,scale=FALSE)
})
svms <- lapply(1:ncol(labels_train),
function(i)
{
svm(train_train,labels_train[,i],cost=10000,scale=FALSE)
})
labels_train[1]
svms[1]
pred_Ca <- predict(svms[1], train_train)
confusionMatrix(pred_Ca, labels_train[1])
pred_Ca
confusionMatrix(pred_Ca, as.vector(labels_train[1]))
confusionMatrix(pred_Ca, as.list(labels_train[1]))
labels_train[1]
pred_Ca
confusionMatrix(pred_Ca[[1]], labels_train[1])
pred_Ca[[1]]
labels_train[1]
labels_train$Ca
confusionMatrix(pred_Ca[[1]], labels_train$Ca)
)
confusionMatrix(as.vector(pred_Ca[[1]]), labels_train$Ca)
pred_Ca
pred_Ca
svms[1]
pred_Ca <- predict(svms[[1]], train_train)
confusionMatrix(as.vector(pred_Ca[[1]]), labels_train$Ca)
confusionMatrix(pred_Ca[1], labels_train$Ca)
pred_Ca[1]
confusionMatrix(pred_Ca, labels_train$Ca)
pred_Ca
labels_train$Ca
str(pred_Ca)
class(pred_Ca)
class(labels_train$Ca)
str(labels_train$Ca)
str(pred_Ca)
table(pred_Ca, labels_train$Ca)
pred_Ca
RSME(svms)
RMSE(svms)
RMSE(pred_Ca)
RMSE(svms[[1]])
?RMSE
RMSE(train_train)
postResample(pred_Ca, train_train)
pred_Ca
postResample(pred_Ca, train_train$Ca)
train_train$Ca
train_train
summary(svms)
summary(svms[1])
summary(svms[[1]])
RMSE(svms[[1]])
postResample(pred_Ca, labels$Ca)
train_train
labels$Ca
pred_Ca
as.vector(pred_Ca)
postResample(as.vector(pred_Ca), labels$Ca)
RMSE(as.vector(pred_Ca), labels$Ca)
R2(as.vector(pred_Ca), labels$Ca)
