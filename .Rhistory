setwd('/Users/ivan/Work_directory/Afr-Soil-Prediction')
train <- read.csv('data/train.csv', stringAsFactor=F)
train <- read.csv('data/train.csv', stringsAsFactor=F)
train <- read.csv('data/training.csv', stringsAsFactor=F)
test <- read.csv('data/test.csv', stringsAsFactor=F)
test <- read.csv('data/sorted_test.csv', stringsAsFactor=F)
library(caret)
str(train)
head(train)
dim(train)
dim(test)
str(train)
str(test)
head(train[,y])
y <- c('Ca', 'P', 'pH', 'SOC', 'Sand')
head(train[,y])
train_pca <- preProcess(train[,-y], method='pca',pcaComp = 2)
train_pca <- train[,-y]
train[,-y]
y <- c('Ca', 'P', 'pH', 'SOC', 'Sand')
head(train[,y])
train_pca <- preProcess(train, method='pca',pcaComp = 2)
str(train)
train <- train[,-1]
head(train)
str(train)
train_pca <- train[,-y]
train_pca <- train[,!y]
train_pca <- train[,y]
train_pca
train_pca <- preProcess(train, method='pca',pcaComp = 2)
head(train[,y])
str(train)
str(train[,3000:3500])
head(train$TMAP)
head(train$TMFI)
head(train$Reli)
head(train$Ref)
setwd('/Users/ivan/Work_directory/Afr-Soil-Prediction')
trainingdata <- read.csv('data/training.csv')
testdata <- read.csv('data/sorted_test.csv')
soil_properties <- c("Ca", "P", "pH", "SOC", "Sand")
## CO2_bands <- 2656:2670
names(trainingdata)[2656:2670]
MIR_measurements <- trainingdata[, 2:2655]
dim(MIR_measurements
)
MIR_DER <- MIR_measurements- cbind(NA, MIR_measurements)[, -(dim(MIR_measurements)[2]+1)]
MIR_DER
(dim(MIR_measurements)[2]+1)
cbind(NA, MIR_measurements)[, -(dim(MIR_measurements)[2]+1)]
cbind(NA, MIR_measurements)[, (dim(MIR_measurements)[2]+1)]
MIR_measurements[,2654]
names(MIR_measurements[,2654])
trainingdata[,2655]
names(trainingdata[,2655])
names(trainingdata)
MIR_DER <- MIR_measurements- cbind(NA, MIR_measurements)[, -(dim(MIR_measurements)[2]+1)]
head(MIR_DER[,1])
X_train <- cbind(trainingdata[, 3580:3595], MIR_DER[,-1])
MIR_measurements <- trainingdata[, 2671:3579]
MIR_DER <- MIR_measurements- cbind(NA, MIR_measurements)[, -(dim(MIR_measurements)[2]+1)]
X_train <- cbind(X_train, MIR_DER[, -1])
head(X_train)
head(X_train[,1:10])
head(trainingdata[,1:10])
MIR_measurements <- testdata[, 2:2655]
MIR_DER <- MIR_measurements- cbind(NA, MIR_measurements)[, -(dim(MIR_measurements)[2]+1)]
X_test <- cbind(testdata[, 3580:3595], MIR_DER[,-1])
MIR_measurements <- testdata[, 2671:3579]
MIR_DER <- MIR_measurements- cbind(NA, MIR_measurements)[, -(dim(MIR_measurements)[2]+1)]
X_test <- cbind(X_test, MIR_DER[, -1])
dim(X_test)[1]
predictions <- rep(NA, dim(X_test)[1])
soil_properties
?bart
for(soil_property in soil_properties){
bart_model <- bart(X_train, trainingdata[, soil_property], x.test = X_test, sigest=sd(trainingdata[, soil_property]), ndpost=10000)
predictions <- cbind(predictions, bart_model$yhat.test.mean)
}
install.packages('BayesTree')
require(BayesTree)
install.packages('BayesTree')
install.packages("BayesTree", lib="/")
library(BayesTree, lib.loc="/")
library('BayesTree_0.3-1.tar', lib.loc="/")
library('BayesTree_0.3-1.tar.gz', lib.loc="/")
library('BayesTree', lib.loc="/")
head(train[,y])
index <- createDataPartition(y = y, p=.8, data=train)
index <- createDataPartition(y = train[,y], p=.8)
index <- createDataPartition(y = train$Ca, p=.8)
index <- createDataPartition(y = c(train$Ca, train$P), p=.8)
index <- createDataPartition(y = c(train$Ca, train$P, train$pH, train$SOC, train$Sand), p=.8)
train_train[index,]
train_train <- train[index,]
index <- createDataPartition(y = c(train$Ca, train$P, train$pH, train$SOC, train$Sand), p=.8, list=F)
train_train <- train[index,]
train_test <- train[-index,]
y <- c('Ca', 'P', 'pH', 'SOC', 'Sand')
fit1 <- train(y~., data=train_train, method='rpart')
fit1 <- train(Ca~., data=train_train, method='rpart')
pred1 <- predict(fit1, train_test)
confusionMatrix(pred1, train_test$Ca)
pred1 <- predict(fit1, train_test)
confusionMatrix(pred1, train_test$Ca)
imp <- varImp(fit1)
imp
dim(train_test$Ca)
dim(train_test)
dim(train_train)
dim(train_train$Ca)
dim(train)
dim(train$Ca)
head(train$Ca)
head(train_train$Ca)
head(train_test$Ca)
length(train_test$Ca)
length(pred)
length(pred1)
confusionMatrix(pred1, train_test$Ca)
class(pred1)
class(train_test$Ca)
str(train_test$Ca)
pred1 <- predict(fit1, train_test)
confusionMatrix(pred1, train_test$Ca)
fit1
head(train[,y])
train_pca <- preProcess(train, method='pca',pcaComp = 2)
col.index <- is.numeric(train[1,])
col.index
col.index <- is.numeric(train[1,1:10])
col.index
col.index <- sapply(train[1,], is.numeric)
col.index
train_num <- train[,col.index]
train_pca <- preProcess(train_num, method='pca',pcaComp = 2)
train_pca
plot(train_pca)
train_pca <- prcomp(train_num)
train_pca
train_pca[,1:10]
train_pca[,10]
train_pca
train_pca[1]
train_pca[2]
train_pca[2][,1:10]
train_pca[2][2]
train_pca[2][1]
train_pca[2][1][1]
plot(train_pca)
index <- createDataPartition(y = c(train$Ca, train$P, train$pH, train$SOC, train$Sand), p=.8, list=F)
train_train <- train[index,]
train_test <- train[-index,]
fit1 <- train(Ca~., data=train_train, method='gbm')
